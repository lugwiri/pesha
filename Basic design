// Java program for design


//Besically, the platform is about users uploading eBooks and videos (podcasts). But the uploads must be approved before appearing in user/newsfeeds. The feeds are like the facebook feeds. Each feed should have the username (their real name), their profile pic the upload, a short description about the contents, and a subscription button and a download buttons. To read/download an ebook or watch a video, a user must subscribe to that author. Once subscribed, the user can read all ebooks/videos associated with that authos for free for 12 months before renewing their subscription. To subscribe, users must buy bundles representing tokens. Ebook subscriptions costs 200 tokens while video subscriptions cost 300 tokens. Bundles range from 100-2000. 100 bundles costs 1$ and each 100 bundles has 100 tokens.
//Payments can be through mobile money, paypal, credit etc

//Users who upload also earn tokens per upload i.e for eBooks, they earn 100 tokens & 150 tokens for videos i.e each 10 token spend earns 1 token as a reward
//They also earn per subscription i.e 20 tokens for each eBook subscription & 30 tokens for each podcast subscription. These tokens are added to their bundle balance and they can use for uploads or subscribe to other users. They can also sale the earned tokens to other users.
//users who subcribe to others also earn tokens, 20 tokens for eBook subscription, 30 tokens for podcast subscription. These are added to their bundles. They can use the tokens to subscribe, uploads, or even sale them to others

//users can also offer their reviews of the work they read/watch (),comments, or share the feeds with others. 
//Anyone can join the platform and subscribe to any user but anyone wishing to upload must have 1000 tokens for ebooks and 1500 tokens for podcasts (videos) i.e the costs of the uploads.


//once subscribed, users can download the file, which should be saved in the library folder for offline use later. The library should have a reader for .pdf, .epub, .chm files and support video watching in offline mode.
//Once registered, users can form book reading clubs/podcast watching clubs (like facebook groups).

//Users will also have their personal accounts where they can view their subscriptions, the subscribers to their work, their uploads and everything associated with them.
//Users can also create book clubs or podcast clubs for reading books or watching podcasts 
//The admin should be able to access all functions such as reviewing user works, deleting accounts etc.
//users can also set their accounts as public or private or even close their accounts
//processed uploads will appear in a newsfeed (will be like posts with a download and a subscribe buttons)
//each post will also have a review section (comments) and a share button
//Below is a rough draft of the main components.

public enum AccountStatus{
PUBLIC,
PRIVATE,
CLOSED
}

public enum MediaContentStatus {
PENDING,
PROCESSED,
FAIL,
REJECTED
}

public enum MediaStatus {
PUBLIC,
PRIVATE,
DELETED
}

public enum MediaQuality {
LOW,
MIDDLE,
HIGH
}

public enum MediaType {
	EBOOK (pdf,chm,mobi,epub),
	PODCAST (Video)
}

public class AddressDetails {
private String street;
private String city;
private String country;
...
}

public class AccountDetails {
private Date createdTime;
private AccountStatus status;
private boolean updateAccountStatus(AccountStatus accountStatus);
...
}

public class Subscriptions {
	private String subscribe; //users subsbcribe to the author of th doc/podcast for 1 year/12 months.They will will access everything offered by the author for that period. 
	private User subscribed; 
	private Date subscribedDate;
	private integer Userid;
	private integer price/tokens; // doc subscription costs 200 tokens, podcasts 300 tokens.

	private boolean updateSubscriptions(String subscriptions);


}

public class Bundles {
	private String buyBundles; //100 bundles costs 1$
	private User myBundles;    //bought bundles
	private integer bundleBalance; //after subscription
	private integer bundleList;// 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000 (1$ buys 100 tokens)
	
	private boolean updateBundles(String bundles);
}

public class Review {  //user comments/reviews about posts
private Integer id;
private User addedBy;
private Date addedDate;
private String review;

public boolean updateReview(String review);
...
}

public class Share {
//users can share posts to their clubs and to their profiles
	
}


public class Downloads {
//users download files after subscribing
//alternatively, they can just save to the library for offline reading/watching
	
}

public class ProfilePic {
//profile pictures
	
}

public class Notifications {
//Notifications section for receiving messages, alerts, news etc
	
}

public class Library {
	private Downloads downloads; //all user downloads go here/to the reader. 
	private Date downloadDate;
	private integer id; //id of docs/video downloaded
	private Reader reader; // all subscribed to docs/podcasts are placed/saved here automatically formthe user for offline reading/watching forever even after the subscription ends/

	private boolean updateLibrary(String library);
}

public class Invitation {   //Users can invite others to join clubs or subscribe to other users
  private Integer userID;
  private InvitationStatus status;
  private Date sentDate;
 
  public boolean updateInvitation(InvitationStatus status);
  ...
}

public enum InvitationStatus{
  PENDING,
  ACCEPTED,
  REJECTED,
  CANCELLED
}
 
public class PendingInvitation extends Invitation{
  public boolean acceptConnection();
  public boolean rejectConnection();
  ...
}
 
public class UserRelations {
  private HashSet<Integer> userSubscriber;
  private HashSet<Integer> userSubscribed;
  private HashSet<ConnectionInvitation> connectionInvitations;
  ...
}
public class Media {
private Integer id;
private User createdBy;
private Date creationDate;
private MediaType mediaType;
private String path;
private MediaStatus mediaStatus;
private MediaContentStatus mediaContentStatus;
private String description; //about 120 characters regarding what the upload/media is about
private String title; 
private String naming; //docs starts with ebook 1 chapter 1..../for podcasts starts Series 1 episode 1...
private int viewsCount;
private int downloadsCount;
private int subscriptionsCount;


private HashSet<Integer> userReviews;
private HashSet<Integer> userDownloads;
private HashSet<Integer> userShares;
private HashSet<integer> userSubscriptions; 
...
}

public class User {
private int id;
private String password;
private String nickname;
private String email;
private String bio;  // include aspects such as Status (work), studied where (primary-high education) etc. (no more than 120 characters).
private integer phonenumber;
private Date joinedDate;
private AddressDetails addressDetails;
private AccountDetails accountDetails;
private Profilepic profilepic;
private Subscriptions subscriptions;
private Bundles bundles;
private Library library;
private Downloads downloads;  //not sure if it should be here
private Notifications notifications;  //not sure if it should be here

private UserRelations userRelations;
private HashSet<ConnectionInvitation> invitationsByMe;
private HashSet<ConnectionInvitation> invitationsToMe;

private boolean updatePassword();
public boolean uploadMedia(Media media);
public boolean updateMedia(int mediaId, MediaStatus mediaStatus);  //not sure about if this should be here
public boolean sendInvitation(ConnectionInvitation invitation);
public List<Medias> getMedias();
public List<User> searchUser(string term);
public List<Medias> searchMedias(string term);
...
}

// this is the user facing side, what users see

public class NewsFeed/Post {
    //not sure here, but needs to display the user uploads like posts 
    //include profile pic, username, the upload, its description, download and subscribe button, review (comment) section, and a share button
}

//these are reading clubs/podcast watching clubs like fb groups

public class BookClubs {
	private BClubStatus bclubStatus; //can be private, public, closed
	private BAdministrator badmin; //club creators are also default admins. creators can add admins
	private BMembers bmembers; // those who join the club.Invitations can be sent
}

public class PodcastClubs {
	private PClubStatus pclubStatus;
	private PAdministrator padmin;
	private PMembers pmembers;
}

//Web services
BundlesService,
SubscriptionsService,
LibraryService,
BookClubsService,
PodcastClubService,
PostsService/FeedsService,
UploadsService,
UserService,
MediaStatusService,
MediaTypeService,
MediaQualityService,
AddressDetailsService,
AccountDetailsService,
MediaContentStatusService,
AccountStatusService,

//Web server
Entity controllers:
AccountStatusController,
MediaContentStatusController,
AccountDetailsController,
AddressDetailsController,
MediaQualityController,
MediaTypeController,
MediaStatusController,
UserController
UploadsController/MediaController //if possible
PostsController/FeedsController
BookClubsController
PodcastClubsController
LibraryConroller
SubscriptionsController
BundlesController

//RESTful API

Users
Create user
Get all users
Update user
Delete user

Posts/Feeds
Get all processed posts/feeds (medias) (homepage)
Get all processed posts/feeds from specific time to now
Get all processed posts/feeds from specific user
Get all replies/comments referring to parent post
Get subscription details about the parent post (Subscribe or Subscribed)
Create new processed post/feed
Delete post/feed
Update post content //not sure about this

//Other main APIs:
UploadMedia
DeleteMedia
GetMedia

//Database

//Will have at least three parts or tables: one for users, another for posts, and another for reviews
//Still figuring out out how to include other properties in the database: bundles, subscriptions, shares, uploads/media, etc.
//Also not sure the best type of database to use
